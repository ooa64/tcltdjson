#------------------------------------------------------------- -*- makefile -*-
#
# Makefile for building Tcl extensions.
#
# Basic build, test and install
#   nmake /f makefile.vc INSTALLDIR=c:\path\to\tcl
#   nmake /f makefile.vc INSTALLDIR=c:\path\to\tcl test
#   nmake /f makefile.vc INSTALLDIR=c:\path\to\tcl install
#
# Environment variables
#   TDROOT = "C:\Pd\Lib"               telegram API install
#   TDSTATIC = 1|0                     link with telegram or use tdjson.dll
#   SSLLIB = "C:\OpenSSL-Win64\lib\VC" for TDSTATIC = 1
#   ZLIB = "C:\ZLib"                   for TDSTATIC = 1
#
# For other build options (debug, static etc.),
# See TIP 477 (https://core.tcl-lang.org/tips/doc/main/tip/477.md) for
# detailed documentation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
#------------------------------------------------------------------------------

# The name of the package
PROJECT = tcltdjson

!include "rules-ext.vc"

# Define the object files and resource file that make up the extension.
# Note the resource file does not makes sense if doing a static library build
# hence it is under that condition. TMP_DIR is the output directory
# defined by rules for object files.
PRJ_OBJS = $(TMP_DIR)\tcltdjson.obj

# Define any additional compiler flags that might be required for the project
PRJ_DEFINES = -D_CRT_SECURE_NO_DEPRECATE
PRJ_DEFINES = $(PRJ_DEFINES) -I$(TMP_DIR) -I$(TDROOT)\include

!ifndef TDSTATIC
TDSTATIC=0
!endif

!if $(TDSTATIC)
PRJ_DEFINES = $(PRJ_DEFINES) -DTDJSON_STATIC_DEFINE
PRJ_LIBS = \
	$(TDROOT)\lib\tdjson_static.lib \
	$(TDROOT)\lib\tdjson_private.lib \
	$(TDROOT)\lib\tdclient.lib \
	$(TDROOT)\lib\tdcore.lib \
	$(TDROOT)\lib\tdnet.lib \
	$(TDROOT)\lib\tdactor.lib \
	$(TDROOT)\lib\tddb.lib \
	$(TDROOT)\lib\tdsqlite.lib \
	$(TDROOT)\lib\tdapi.lib \
	$(TDROOT)\lib\tdutils.lib \
	$(SSLLIB)\libssl64MD.lib \
	$(SSLLIB)\libcrypto64MD.lib \
        $(ZLIB)\zlib.lib \
        ws2_32.lib Crypt32.lib Normaliz.lib psapi.lib
!else
PRJ_LIBS = $(TDROOT)\lib\tdjson.lib
!endif

# Define the standard targets
!include "$(_RULESDIR)\targets.vc"

# We must define a pkgindex target that will create a pkgIndex.tcl
# file in the $(OUT_DIR) directory. We can just redirect to the
# default-pkgindex target for our extension.
pkgindex: default-pkgindex

$(ROOT)\manifest.uuid:
	copy $(WIN_DIR)\gitmanifest.in $(ROOT)\manifest.uuid
	git rev-parse HEAD >>$(ROOT)\manifest.uuid

$(TMP_DIR)\tcltdjsonUuid.h: $(ROOT)\manifest.uuid
	copy $(WIN_DIR)\tcltdjsonUuid.h.in+$(ROOT)\manifest.uuid $(TMP_DIR)\tcltdjsonUuid.h


# The default install target only installs binaries and scripts so add
# an additional target for our documentation. Note this *adds* a target
# since no commands are listed after it. The original targets for
# install (from targets.vc) will remain.
install: default-install-docs-n

# Explicit dependency rules
$(GENERICDIR)\tcltdjson.c : $(GENERICDIR)\tcltdjson.h $(TMP_DIR)\tcltdjsonUuid.h
